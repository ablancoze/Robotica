//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.2
//
// <auto-generated>
//
// Generated from file `RGBDBus.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __RGBDBus_h__
#define __RGBDBus_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/ValueF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Comparable.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/GCObject.h>
#include <Ice/Value.h>
#include <Ice/Incoming.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <Ice/Optional.h>
#include <Ice/ExceptionHelpers.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 2
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace RoboCompRGBDBus
{

class RGBDBus;
class RGBDBusPrx;

}

namespace RoboCompRGBDBus
{

class HardwareFailedException : public ::Ice::UserExceptionHelper<HardwareFailedException, ::Ice::UserException>
{
public:

    virtual ~HardwareFailedException();

    HardwareFailedException(const HardwareFailedException&) = default;

    HardwareFailedException() = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    HardwareFailedException(const ::std::string& what) :
        what(::std::move(what))
    {
    }

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */

    std::tuple<const ::std::string&> ice_tuple() const
    {
        return std::tie(what);
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    ::std::string what;
};

/// \cond INTERNAL
static HardwareFailedException _iceS_HardwareFailedException_init;
/// \endcond

struct CameraParams
{
    int colorWidth;
    int colorHeight;
    int colorFPS;
    int depthWidth;
    int depthHeight;
    int depthFPS;
    float colorFocal;
    float depthFocal;
    ::std::string name;

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */

    std::tuple<const int&, const int&, const int&, const int&, const int&, const int&, const float&, const float&, const ::std::string&> ice_tuple() const
    {
        return std::tie(colorWidth, colorHeight, colorFPS, depthWidth, depthHeight, depthFPS, colorFocal, depthFocal, name);
    }
};

using CameraParamsMap = ::std::map<::std::string, CameraParams>;

using CameraList = ::std::vector<::std::string>;

using ColorBuffer = ::std::vector<::Ice::Byte>;

using DepthBuffer = ::std::vector<float>;

struct Image
{
    CameraParams camera;
    ColorBuffer colorImage;
    DepthBuffer depthImage;
    int width;
    int height;
    long long int colorTimestamp;
    long long int depthTimestamp;

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */

    std::tuple<const CameraParams&, const ColorBuffer&, const DepthBuffer&, const int&, const int&, const long long int&, const long long int&> ice_tuple() const
    {
        return std::tie(camera, colorImage, depthImage, width, height, colorTimestamp, depthTimestamp);
    }
};

using ImageMap = ::std::map<::std::string, Image>;

struct Point3D
{
    ::Ice::Byte r;
    ::Ice::Byte g;
    ::Ice::Byte b;
    float x;
    float y;
    float z;

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */

    std::tuple<const ::Ice::Byte&, const ::Ice::Byte&, const ::Ice::Byte&, const float&, const float&, const float&> ice_tuple() const
    {
        return std::tie(r, g, b, x, y, z);
    }
};

using PointCloud = ::std::vector<Point3D>;

using PointCloudMap = ::std::map<::std::string, PointCloud>;

using Ice::operator<;
using Ice::operator<=;
using Ice::operator>;
using Ice::operator>=;
using Ice::operator==;
using Ice::operator!=;

}

namespace RoboCompRGBDBus
{

class RGBDBus : public virtual ::Ice::Object
{
public:

    using ProxyType = RGBDBusPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual CameraParamsMap getAllCameraParams(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_getAllCameraParams(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void getImages(CameraList cameras, ImageMap& images, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_getImages(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void getPointClouds(CameraList cameras, PointCloudMap& clouds, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_getPointClouds(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void getProtoClouds(CameraList cameras, PointCloudMap& protoClouds, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_getProtoClouds(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void getDecimatedImages(CameraList cameras, int decimation, ImageMap& images, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_getDecimatedImages(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

}

namespace RoboCompRGBDBus
{

class RGBDBusPrx : public virtual ::Ice::Proxy<RGBDBusPrx, ::Ice::ObjectPrx>
{
public:

    CameraParamsMap getAllCameraParams(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<CameraParamsMap>(true, this, &RGBDBusPrx::_iceI_getAllCameraParams, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getAllCameraParamsAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<CameraParamsMap>>().get_future())
    {
        return _makePromiseOutgoing<CameraParamsMap, P>(false, this, &RGBDBusPrx::_iceI_getAllCameraParams, context);
    }

    ::std::function<void()>
    getAllCameraParamsAsync(::std::function<void(CameraParamsMap)> response,
                            ::std::function<void(::std::exception_ptr)> ex = nullptr,
                            ::std::function<void(bool)> sent = nullptr,
                            const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<CameraParamsMap>(response, ex, sent, this, &RoboCompRGBDBus::RGBDBusPrx::_iceI_getAllCameraParams, context);
    }

    /// \cond INTERNAL
    void _iceI_getAllCameraParams(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<CameraParamsMap>>&, const ::Ice::Context&);
    /// \endcond

    void getImages(const CameraList& cameras, ImageMap& images, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        images = _makePromiseOutgoing<ImageMap>(true, this, &RGBDBusPrx::_iceI_getImages, cameras, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getImagesAsync(const CameraList& cameras, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<ImageMap>>().get_future())
    {
        return _makePromiseOutgoing<ImageMap, P>(false, this, &RGBDBusPrx::_iceI_getImages, cameras, context);
    }

    ::std::function<void()>
    getImagesAsync(const CameraList& cameras,
                   ::std::function<void(ImageMap)> response,
                   ::std::function<void(::std::exception_ptr)> ex = nullptr,
                   ::std::function<void(bool)> sent = nullptr,
                   const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<ImageMap>(response, ex, sent, this, &RoboCompRGBDBus::RGBDBusPrx::_iceI_getImages, cameras, context);
    }

    /// \cond INTERNAL
    void _iceI_getImages(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<ImageMap>>&, const CameraList&, const ::Ice::Context&);
    /// \endcond

    void getPointClouds(const CameraList& cameras, PointCloudMap& clouds, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        clouds = _makePromiseOutgoing<PointCloudMap>(true, this, &RGBDBusPrx::_iceI_getPointClouds, cameras, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getPointCloudsAsync(const CameraList& cameras, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<PointCloudMap>>().get_future())
    {
        return _makePromiseOutgoing<PointCloudMap, P>(false, this, &RGBDBusPrx::_iceI_getPointClouds, cameras, context);
    }

    ::std::function<void()>
    getPointCloudsAsync(const CameraList& cameras,
                        ::std::function<void(PointCloudMap)> response,
                        ::std::function<void(::std::exception_ptr)> ex = nullptr,
                        ::std::function<void(bool)> sent = nullptr,
                        const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<PointCloudMap>(response, ex, sent, this, &RoboCompRGBDBus::RGBDBusPrx::_iceI_getPointClouds, cameras, context);
    }

    /// \cond INTERNAL
    void _iceI_getPointClouds(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<PointCloudMap>>&, const CameraList&, const ::Ice::Context&);
    /// \endcond

    void getProtoClouds(const CameraList& cameras, PointCloudMap& protoClouds, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        protoClouds = _makePromiseOutgoing<PointCloudMap>(true, this, &RGBDBusPrx::_iceI_getProtoClouds, cameras, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getProtoCloudsAsync(const CameraList& cameras, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<PointCloudMap>>().get_future())
    {
        return _makePromiseOutgoing<PointCloudMap, P>(false, this, &RGBDBusPrx::_iceI_getProtoClouds, cameras, context);
    }

    ::std::function<void()>
    getProtoCloudsAsync(const CameraList& cameras,
                        ::std::function<void(PointCloudMap)> response,
                        ::std::function<void(::std::exception_ptr)> ex = nullptr,
                        ::std::function<void(bool)> sent = nullptr,
                        const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<PointCloudMap>(response, ex, sent, this, &RoboCompRGBDBus::RGBDBusPrx::_iceI_getProtoClouds, cameras, context);
    }

    /// \cond INTERNAL
    void _iceI_getProtoClouds(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<PointCloudMap>>&, const CameraList&, const ::Ice::Context&);
    /// \endcond

    void getDecimatedImages(const CameraList& cameras, int decimation, ImageMap& images, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        images = _makePromiseOutgoing<ImageMap>(true, this, &RGBDBusPrx::_iceI_getDecimatedImages, cameras, decimation, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getDecimatedImagesAsync(const CameraList& cameras, int decimation, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<ImageMap>>().get_future())
    {
        return _makePromiseOutgoing<ImageMap, P>(false, this, &RGBDBusPrx::_iceI_getDecimatedImages, cameras, decimation, context);
    }

    ::std::function<void()>
    getDecimatedImagesAsync(const CameraList& cameras, int decimation,
                            ::std::function<void(ImageMap)> response,
                            ::std::function<void(::std::exception_ptr)> ex = nullptr,
                            ::std::function<void(bool)> sent = nullptr,
                            const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<ImageMap>(response, ex, sent, this, &RoboCompRGBDBus::RGBDBusPrx::_iceI_getDecimatedImages, cameras, decimation, context);
    }

    /// \cond INTERNAL
    void _iceI_getDecimatedImages(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<ImageMap>>&, const CameraList&, int, const ::Ice::Context&);
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:

    /// \cond INTERNAL
    RGBDBusPrx() = default;
    friend ::std::shared_ptr<RGBDBusPrx> IceInternal::createProxy<RGBDBusPrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
    /// \endcond
};

}

/// \cond STREAM
namespace Ice
{

template<typename S>
struct StreamReader<::RoboCompRGBDBus::HardwareFailedException, S>
{
    static void read(S* istr, ::RoboCompRGBDBus::HardwareFailedException& v)
    {
        istr->readAll(v.what);
    }
};

template<>
struct StreamableTraits<::RoboCompRGBDBus::CameraParams>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 33;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamReader<::RoboCompRGBDBus::CameraParams, S>
{
    static void read(S* istr, ::RoboCompRGBDBus::CameraParams& v)
    {
        istr->readAll(v.colorWidth, v.colorHeight, v.colorFPS, v.depthWidth, v.depthHeight, v.depthFPS, v.colorFocal, v.depthFocal, v.name);
    }
};

template<>
struct StreamableTraits<::RoboCompRGBDBus::Image>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 59;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamReader<::RoboCompRGBDBus::Image, S>
{
    static void read(S* istr, ::RoboCompRGBDBus::Image& v)
    {
        istr->readAll(v.camera, v.colorImage, v.depthImage, v.width, v.height, v.colorTimestamp, v.depthTimestamp);
    }
};

template<>
struct StreamableTraits<::RoboCompRGBDBus::Point3D>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 15;
    static const bool fixedLength = true;
};

template<typename S>
struct StreamReader<::RoboCompRGBDBus::Point3D, S>
{
    static void read(S* istr, ::RoboCompRGBDBus::Point3D& v)
    {
        istr->readAll(v.r, v.g, v.b, v.x, v.y, v.z);
    }
};

}
/// \endcond

/// \cond INTERNAL
namespace RoboCompRGBDBus
{

using RGBDBusPtr = ::std::shared_ptr<RGBDBus>;
using RGBDBusPrxPtr = ::std::shared_ptr<RGBDBusPrx>;

}
/// \endcond

#else // C++98 mapping

namespace IceProxy
{

namespace RoboCompRGBDBus
{

class RGBDBus;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< RGBDBus>&);
::IceProxy::Ice::Object* upCast(RGBDBus*);
/// \endcond

}

}

namespace RoboCompRGBDBus
{

class RGBDBus;
/// \cond INTERNAL
::Ice::Object* upCast(RGBDBus*);
/// \endcond
typedef ::IceInternal::Handle< RGBDBus> RGBDBusPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::RoboCompRGBDBus::RGBDBus> RGBDBusPrx;
typedef RGBDBusPrx RGBDBusPrxPtr;
/// \cond INTERNAL
void _icePatchObjectPtr(RGBDBusPtr&, const ::Ice::ObjectPtr&);
/// \endcond

}

namespace RoboCompRGBDBus
{

class HardwareFailedException : public ::Ice::UserException
{
public:

    HardwareFailedException() {}
    /**
     * One-shot constructor to initialize all data members.
     */
    explicit HardwareFailedException(const ::std::string& what);
    virtual ~HardwareFailedException() throw();

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    virtual ::std::string ice_id() const;
    /**
     * Polymporphically clones this exception.
     * @return A shallow copy of this exception.
     */
    virtual HardwareFailedException* ice_clone() const;
    /**
     * Throws this exception.
     */
    virtual void ice_throw() const;

    ::std::string what;

protected:

    /// \cond STREAM
    virtual void _writeImpl(::Ice::OutputStream*) const;
    virtual void _readImpl(::Ice::InputStream*);
    /// \endcond
};

/// \cond INTERNAL
static HardwareFailedException _iceS_HardwareFailedException_init;
/// \endcond

struct CameraParams
{
    ::Ice::Int colorWidth;
    ::Ice::Int colorHeight;
    ::Ice::Int colorFPS;
    ::Ice::Int depthWidth;
    ::Ice::Int depthHeight;
    ::Ice::Int depthFPS;
    ::Ice::Float colorFocal;
    ::Ice::Float depthFocal;
    ::std::string name;

    bool operator==(const CameraParams& rhs_) const
    {
        if(this == &rhs_)
        {
            return true;
        }
        if(colorWidth != rhs_.colorWidth)
        {
            return false;
        }
        if(colorHeight != rhs_.colorHeight)
        {
            return false;
        }
        if(colorFPS != rhs_.colorFPS)
        {
            return false;
        }
        if(depthWidth != rhs_.depthWidth)
        {
            return false;
        }
        if(depthHeight != rhs_.depthHeight)
        {
            return false;
        }
        if(depthFPS != rhs_.depthFPS)
        {
            return false;
        }
        if(colorFocal != rhs_.colorFocal)
        {
            return false;
        }
        if(depthFocal != rhs_.depthFocal)
        {
            return false;
        }
        if(name != rhs_.name)
        {
            return false;
        }
        return true;
    }

    bool operator<(const CameraParams& rhs_) const
    {
        if(this == &rhs_)
        {
            return false;
        }
        if(colorWidth < rhs_.colorWidth)
        {
            return true;
        }
        else if(rhs_.colorWidth < colorWidth)
        {
            return false;
        }
        if(colorHeight < rhs_.colorHeight)
        {
            return true;
        }
        else if(rhs_.colorHeight < colorHeight)
        {
            return false;
        }
        if(colorFPS < rhs_.colorFPS)
        {
            return true;
        }
        else if(rhs_.colorFPS < colorFPS)
        {
            return false;
        }
        if(depthWidth < rhs_.depthWidth)
        {
            return true;
        }
        else if(rhs_.depthWidth < depthWidth)
        {
            return false;
        }
        if(depthHeight < rhs_.depthHeight)
        {
            return true;
        }
        else if(rhs_.depthHeight < depthHeight)
        {
            return false;
        }
        if(depthFPS < rhs_.depthFPS)
        {
            return true;
        }
        else if(rhs_.depthFPS < depthFPS)
        {
            return false;
        }
        if(colorFocal < rhs_.colorFocal)
        {
            return true;
        }
        else if(rhs_.colorFocal < colorFocal)
        {
            return false;
        }
        if(depthFocal < rhs_.depthFocal)
        {
            return true;
        }
        else if(rhs_.depthFocal < depthFocal)
        {
            return false;
        }
        if(name < rhs_.name)
        {
            return true;
        }
        else if(rhs_.name < name)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const CameraParams& rhs_) const
    {
        return !operator==(rhs_);
    }
    bool operator<=(const CameraParams& rhs_) const
    {
        return operator<(rhs_) || operator==(rhs_);
    }
    bool operator>(const CameraParams& rhs_) const
    {
        return !operator<(rhs_) && !operator==(rhs_);
    }
    bool operator>=(const CameraParams& rhs_) const
    {
        return !operator<(rhs_);
    }
};

typedef ::std::map< ::std::string, CameraParams> CameraParamsMap;

typedef ::std::vector< ::std::string> CameraList;

typedef ::std::vector< ::Ice::Byte> ColorBuffer;

typedef ::std::vector< ::Ice::Float> DepthBuffer;

struct Image
{
    CameraParams camera;
    ColorBuffer colorImage;
    DepthBuffer depthImage;
    ::Ice::Int width;
    ::Ice::Int height;
    ::Ice::Long colorTimestamp;
    ::Ice::Long depthTimestamp;

    bool operator==(const Image& rhs_) const
    {
        if(this == &rhs_)
        {
            return true;
        }
        if(camera != rhs_.camera)
        {
            return false;
        }
        if(colorImage != rhs_.colorImage)
        {
            return false;
        }
        if(depthImage != rhs_.depthImage)
        {
            return false;
        }
        if(width != rhs_.width)
        {
            return false;
        }
        if(height != rhs_.height)
        {
            return false;
        }
        if(colorTimestamp != rhs_.colorTimestamp)
        {
            return false;
        }
        if(depthTimestamp != rhs_.depthTimestamp)
        {
            return false;
        }
        return true;
    }

    bool operator<(const Image& rhs_) const
    {
        if(this == &rhs_)
        {
            return false;
        }
        if(camera < rhs_.camera)
        {
            return true;
        }
        else if(rhs_.camera < camera)
        {
            return false;
        }
        if(colorImage < rhs_.colorImage)
        {
            return true;
        }
        else if(rhs_.colorImage < colorImage)
        {
            return false;
        }
        if(depthImage < rhs_.depthImage)
        {
            return true;
        }
        else if(rhs_.depthImage < depthImage)
        {
            return false;
        }
        if(width < rhs_.width)
        {
            return true;
        }
        else if(rhs_.width < width)
        {
            return false;
        }
        if(height < rhs_.height)
        {
            return true;
        }
        else if(rhs_.height < height)
        {
            return false;
        }
        if(colorTimestamp < rhs_.colorTimestamp)
        {
            return true;
        }
        else if(rhs_.colorTimestamp < colorTimestamp)
        {
            return false;
        }
        if(depthTimestamp < rhs_.depthTimestamp)
        {
            return true;
        }
        else if(rhs_.depthTimestamp < depthTimestamp)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const Image& rhs_) const
    {
        return !operator==(rhs_);
    }
    bool operator<=(const Image& rhs_) const
    {
        return operator<(rhs_) || operator==(rhs_);
    }
    bool operator>(const Image& rhs_) const
    {
        return !operator<(rhs_) && !operator==(rhs_);
    }
    bool operator>=(const Image& rhs_) const
    {
        return !operator<(rhs_);
    }
};

typedef ::std::map< ::std::string, Image> ImageMap;

struct Point3D
{
    ::Ice::Byte r;
    ::Ice::Byte g;
    ::Ice::Byte b;
    ::Ice::Float x;
    ::Ice::Float y;
    ::Ice::Float z;

    bool operator==(const Point3D& rhs_) const
    {
        if(this == &rhs_)
        {
            return true;
        }
        if(r != rhs_.r)
        {
            return false;
        }
        if(g != rhs_.g)
        {
            return false;
        }
        if(b != rhs_.b)
        {
            return false;
        }
        if(x != rhs_.x)
        {
            return false;
        }
        if(y != rhs_.y)
        {
            return false;
        }
        if(z != rhs_.z)
        {
            return false;
        }
        return true;
    }

    bool operator<(const Point3D& rhs_) const
    {
        if(this == &rhs_)
        {
            return false;
        }
        if(r < rhs_.r)
        {
            return true;
        }
        else if(rhs_.r < r)
        {
            return false;
        }
        if(g < rhs_.g)
        {
            return true;
        }
        else if(rhs_.g < g)
        {
            return false;
        }
        if(b < rhs_.b)
        {
            return true;
        }
        else if(rhs_.b < b)
        {
            return false;
        }
        if(x < rhs_.x)
        {
            return true;
        }
        else if(rhs_.x < x)
        {
            return false;
        }
        if(y < rhs_.y)
        {
            return true;
        }
        else if(rhs_.y < y)
        {
            return false;
        }
        if(z < rhs_.z)
        {
            return true;
        }
        else if(rhs_.z < z)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const Point3D& rhs_) const
    {
        return !operator==(rhs_);
    }
    bool operator<=(const Point3D& rhs_) const
    {
        return operator<(rhs_) || operator==(rhs_);
    }
    bool operator>(const Point3D& rhs_) const
    {
        return !operator<(rhs_) && !operator==(rhs_);
    }
    bool operator>=(const Point3D& rhs_) const
    {
        return !operator<(rhs_);
    }
};

typedef ::std::vector<Point3D> PointCloud;

typedef ::std::map< ::std::string, PointCloud> PointCloudMap;

}

namespace RoboCompRGBDBus
{

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::RoboCompRGBDBus::RGBDBus::begin_getAllCameraParams.
 * Create a wrapper instance by calling ::RoboCompRGBDBus::newCallback_RGBDBus_getAllCameraParams.
 */
class Callback_RGBDBus_getAllCameraParams_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_RGBDBus_getAllCameraParams_Base> Callback_RGBDBus_getAllCameraParamsPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::RoboCompRGBDBus::RGBDBus::begin_getImages.
 * Create a wrapper instance by calling ::RoboCompRGBDBus::newCallback_RGBDBus_getImages.
 */
class Callback_RGBDBus_getImages_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_RGBDBus_getImages_Base> Callback_RGBDBus_getImagesPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::RoboCompRGBDBus::RGBDBus::begin_getPointClouds.
 * Create a wrapper instance by calling ::RoboCompRGBDBus::newCallback_RGBDBus_getPointClouds.
 */
class Callback_RGBDBus_getPointClouds_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_RGBDBus_getPointClouds_Base> Callback_RGBDBus_getPointCloudsPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::RoboCompRGBDBus::RGBDBus::begin_getProtoClouds.
 * Create a wrapper instance by calling ::RoboCompRGBDBus::newCallback_RGBDBus_getProtoClouds.
 */
class Callback_RGBDBus_getProtoClouds_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_RGBDBus_getProtoClouds_Base> Callback_RGBDBus_getProtoCloudsPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::RoboCompRGBDBus::RGBDBus::begin_getDecimatedImages.
 * Create a wrapper instance by calling ::RoboCompRGBDBus::newCallback_RGBDBus_getDecimatedImages.
 */
class Callback_RGBDBus_getDecimatedImages_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_RGBDBus_getDecimatedImages_Base> Callback_RGBDBus_getDecimatedImagesPtr;

}

namespace IceProxy
{

namespace RoboCompRGBDBus
{

class RGBDBus : public virtual ::Ice::Proxy<RGBDBus, ::IceProxy::Ice::Object>
{
public:

    ::RoboCompRGBDBus::CameraParamsMap getAllCameraParams(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_getAllCameraParams(_iceI_begin_getAllCameraParams(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getAllCameraParams(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getAllCameraParams(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getAllCameraParams(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getAllCameraParams(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getAllCameraParams(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getAllCameraParams(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getAllCameraParams(const ::RoboCompRGBDBus::Callback_RGBDBus_getAllCameraParamsPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getAllCameraParams(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getAllCameraParams(const ::Ice::Context& context, const ::RoboCompRGBDBus::Callback_RGBDBus_getAllCameraParamsPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getAllCameraParams(context, cb, cookie);
    }

    ::RoboCompRGBDBus::CameraParamsMap end_getAllCameraParams(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getAllCameraParams(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void getImages(const ::RoboCompRGBDBus::CameraList& cameras, ::RoboCompRGBDBus::ImageMap& images, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_getImages(images, _iceI_begin_getImages(cameras, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getImages(const ::RoboCompRGBDBus::CameraList& cameras, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getImages(cameras, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getImages(const ::RoboCompRGBDBus::CameraList& cameras, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getImages(cameras, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getImages(const ::RoboCompRGBDBus::CameraList& cameras, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getImages(cameras, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getImages(const ::RoboCompRGBDBus::CameraList& cameras, const ::RoboCompRGBDBus::Callback_RGBDBus_getImagesPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getImages(cameras, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getImages(const ::RoboCompRGBDBus::CameraList& cameras, const ::Ice::Context& context, const ::RoboCompRGBDBus::Callback_RGBDBus_getImagesPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getImages(cameras, context, cb, cookie);
    }

    void end_getImages(::RoboCompRGBDBus::ImageMap& images, const ::Ice::AsyncResultPtr& result);
    /// \cond INTERNAL

    void _iceI_end_getImages(::RoboCompRGBDBus::ImageMap& iceP_images, const ::Ice::AsyncResultPtr&);
    /// \endcond

private:

    ::Ice::AsyncResultPtr _iceI_begin_getImages(const ::RoboCompRGBDBus::CameraList&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void getPointClouds(const ::RoboCompRGBDBus::CameraList& cameras, ::RoboCompRGBDBus::PointCloudMap& clouds, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_getPointClouds(clouds, _iceI_begin_getPointClouds(cameras, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getPointClouds(const ::RoboCompRGBDBus::CameraList& cameras, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getPointClouds(cameras, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getPointClouds(const ::RoboCompRGBDBus::CameraList& cameras, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getPointClouds(cameras, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getPointClouds(const ::RoboCompRGBDBus::CameraList& cameras, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getPointClouds(cameras, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getPointClouds(const ::RoboCompRGBDBus::CameraList& cameras, const ::RoboCompRGBDBus::Callback_RGBDBus_getPointCloudsPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getPointClouds(cameras, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getPointClouds(const ::RoboCompRGBDBus::CameraList& cameras, const ::Ice::Context& context, const ::RoboCompRGBDBus::Callback_RGBDBus_getPointCloudsPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getPointClouds(cameras, context, cb, cookie);
    }

    void end_getPointClouds(::RoboCompRGBDBus::PointCloudMap& clouds, const ::Ice::AsyncResultPtr& result);
    /// \cond INTERNAL

    void _iceI_end_getPointClouds(::RoboCompRGBDBus::PointCloudMap& iceP_clouds, const ::Ice::AsyncResultPtr&);
    /// \endcond

private:

    ::Ice::AsyncResultPtr _iceI_begin_getPointClouds(const ::RoboCompRGBDBus::CameraList&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void getProtoClouds(const ::RoboCompRGBDBus::CameraList& cameras, ::RoboCompRGBDBus::PointCloudMap& protoClouds, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_getProtoClouds(protoClouds, _iceI_begin_getProtoClouds(cameras, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getProtoClouds(const ::RoboCompRGBDBus::CameraList& cameras, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getProtoClouds(cameras, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getProtoClouds(const ::RoboCompRGBDBus::CameraList& cameras, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getProtoClouds(cameras, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getProtoClouds(const ::RoboCompRGBDBus::CameraList& cameras, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getProtoClouds(cameras, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getProtoClouds(const ::RoboCompRGBDBus::CameraList& cameras, const ::RoboCompRGBDBus::Callback_RGBDBus_getProtoCloudsPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getProtoClouds(cameras, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getProtoClouds(const ::RoboCompRGBDBus::CameraList& cameras, const ::Ice::Context& context, const ::RoboCompRGBDBus::Callback_RGBDBus_getProtoCloudsPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getProtoClouds(cameras, context, cb, cookie);
    }

    void end_getProtoClouds(::RoboCompRGBDBus::PointCloudMap& protoClouds, const ::Ice::AsyncResultPtr& result);
    /// \cond INTERNAL

    void _iceI_end_getProtoClouds(::RoboCompRGBDBus::PointCloudMap& iceP_protoClouds, const ::Ice::AsyncResultPtr&);
    /// \endcond

private:

    ::Ice::AsyncResultPtr _iceI_begin_getProtoClouds(const ::RoboCompRGBDBus::CameraList&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void getDecimatedImages(const ::RoboCompRGBDBus::CameraList& cameras, ::Ice::Int decimation, ::RoboCompRGBDBus::ImageMap& images, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_getDecimatedImages(images, _iceI_begin_getDecimatedImages(cameras, decimation, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getDecimatedImages(const ::RoboCompRGBDBus::CameraList& cameras, ::Ice::Int decimation, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getDecimatedImages(cameras, decimation, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getDecimatedImages(const ::RoboCompRGBDBus::CameraList& cameras, ::Ice::Int decimation, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getDecimatedImages(cameras, decimation, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getDecimatedImages(const ::RoboCompRGBDBus::CameraList& cameras, ::Ice::Int decimation, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getDecimatedImages(cameras, decimation, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getDecimatedImages(const ::RoboCompRGBDBus::CameraList& cameras, ::Ice::Int decimation, const ::RoboCompRGBDBus::Callback_RGBDBus_getDecimatedImagesPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getDecimatedImages(cameras, decimation, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getDecimatedImages(const ::RoboCompRGBDBus::CameraList& cameras, ::Ice::Int decimation, const ::Ice::Context& context, const ::RoboCompRGBDBus::Callback_RGBDBus_getDecimatedImagesPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getDecimatedImages(cameras, decimation, context, cb, cookie);
    }

    void end_getDecimatedImages(::RoboCompRGBDBus::ImageMap& images, const ::Ice::AsyncResultPtr& result);
    /// \cond INTERNAL

    void _iceI_end_getDecimatedImages(::RoboCompRGBDBus::ImageMap& iceP_images, const ::Ice::AsyncResultPtr&);
    /// \endcond

private:

    ::Ice::AsyncResultPtr _iceI_begin_getDecimatedImages(const ::RoboCompRGBDBus::CameraList&, ::Ice::Int, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

}

}

namespace RoboCompRGBDBus
{

class RGBDBus : public virtual ::Ice::Object
{
public:

    typedef RGBDBusPrx ProxyType;
    typedef RGBDBusPtr PointerType;

    virtual ~RGBDBus();

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(const ::std::string& id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual const ::std::string& ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual CameraParamsMap getAllCameraParams(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_getAllCameraParams(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void getImages(const CameraList& cameras, ImageMap& images, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_getImages(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void getPointClouds(const CameraList& cameras, PointCloudMap& clouds, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_getPointClouds(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void getProtoClouds(const CameraList& cameras, PointCloudMap& protoClouds, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_getProtoClouds(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void getDecimatedImages(const CameraList& cameras, ::Ice::Int decimation, ImageMap& images, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_getDecimatedImages(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

protected:

    /// \cond STREAM
    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
    /// \endcond
};

/// \cond INTERNAL
inline bool operator==(const RGBDBus& lhs, const RGBDBus& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) == static_cast<const ::Ice::Object&>(rhs);
}

inline bool operator<(const RGBDBus& lhs, const RGBDBus& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) < static_cast<const ::Ice::Object&>(rhs);
}
/// \endcond

}

/// \cond STREAM
namespace Ice
{

template<>
struct StreamableTraits< ::RoboCompRGBDBus::HardwareFailedException>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<typename S>
struct StreamWriter< ::RoboCompRGBDBus::HardwareFailedException, S>
{
    static void write(S* ostr, const ::RoboCompRGBDBus::HardwareFailedException& v)
    {
        ostr->write(v.what);
    }
};

template<typename S>
struct StreamReader< ::RoboCompRGBDBus::HardwareFailedException, S>
{
    static void read(S* istr, ::RoboCompRGBDBus::HardwareFailedException& v)
    {
        istr->read(v.what);
    }
};

template<>
struct StreamableTraits< ::RoboCompRGBDBus::CameraParams>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 33;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamWriter< ::RoboCompRGBDBus::CameraParams, S>
{
    static void write(S* ostr, const ::RoboCompRGBDBus::CameraParams& v)
    {
        ostr->write(v.colorWidth);
        ostr->write(v.colorHeight);
        ostr->write(v.colorFPS);
        ostr->write(v.depthWidth);
        ostr->write(v.depthHeight);
        ostr->write(v.depthFPS);
        ostr->write(v.colorFocal);
        ostr->write(v.depthFocal);
        ostr->write(v.name);
    }
};

template<typename S>
struct StreamReader< ::RoboCompRGBDBus::CameraParams, S>
{
    static void read(S* istr, ::RoboCompRGBDBus::CameraParams& v)
    {
        istr->read(v.colorWidth);
        istr->read(v.colorHeight);
        istr->read(v.colorFPS);
        istr->read(v.depthWidth);
        istr->read(v.depthHeight);
        istr->read(v.depthFPS);
        istr->read(v.colorFocal);
        istr->read(v.depthFocal);
        istr->read(v.name);
    }
};

template<>
struct StreamableTraits< ::RoboCompRGBDBus::Image>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 59;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamWriter< ::RoboCompRGBDBus::Image, S>
{
    static void write(S* ostr, const ::RoboCompRGBDBus::Image& v)
    {
        ostr->write(v.camera);
        ostr->write(v.colorImage);
        ostr->write(v.depthImage);
        ostr->write(v.width);
        ostr->write(v.height);
        ostr->write(v.colorTimestamp);
        ostr->write(v.depthTimestamp);
    }
};

template<typename S>
struct StreamReader< ::RoboCompRGBDBus::Image, S>
{
    static void read(S* istr, ::RoboCompRGBDBus::Image& v)
    {
        istr->read(v.camera);
        istr->read(v.colorImage);
        istr->read(v.depthImage);
        istr->read(v.width);
        istr->read(v.height);
        istr->read(v.colorTimestamp);
        istr->read(v.depthTimestamp);
    }
};

template<>
struct StreamableTraits< ::RoboCompRGBDBus::Point3D>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 15;
    static const bool fixedLength = true;
};

template<typename S>
struct StreamWriter< ::RoboCompRGBDBus::Point3D, S>
{
    static void write(S* ostr, const ::RoboCompRGBDBus::Point3D& v)
    {
        ostr->write(v.r);
        ostr->write(v.g);
        ostr->write(v.b);
        ostr->write(v.x);
        ostr->write(v.y);
        ostr->write(v.z);
    }
};

template<typename S>
struct StreamReader< ::RoboCompRGBDBus::Point3D, S>
{
    static void read(S* istr, ::RoboCompRGBDBus::Point3D& v)
    {
        istr->read(v.r);
        istr->read(v.g);
        istr->read(v.b);
        istr->read(v.x);
        istr->read(v.y);
        istr->read(v.z);
    }
};

}
/// \endcond

namespace RoboCompRGBDBus
{

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::RoboCompRGBDBus::RGBDBus::begin_getAllCameraParams.
 * Create a wrapper instance by calling ::RoboCompRGBDBus::newCallback_RGBDBus_getAllCameraParams.
 */
template<class T>
class CallbackNC_RGBDBus_getAllCameraParams : public Callback_RGBDBus_getAllCameraParams_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const CameraParamsMap&);

    CallbackNC_RGBDBus_getAllCameraParams(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        RGBDBusPrx proxy = RGBDBusPrx::uncheckedCast(result->getProxy());
        CameraParamsMap ret;
        try
        {
            ret = proxy->end_getAllCameraParams(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompRGBDBus::RGBDBus::begin_getAllCameraParams.
 */
template<class T> Callback_RGBDBus_getAllCameraParamsPtr
newCallback_RGBDBus_getAllCameraParams(const IceUtil::Handle<T>& instance, void (T::*cb)(const CameraParamsMap&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RGBDBus_getAllCameraParams<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompRGBDBus::RGBDBus::begin_getAllCameraParams.
 */
template<class T> Callback_RGBDBus_getAllCameraParamsPtr
newCallback_RGBDBus_getAllCameraParams(T* instance, void (T::*cb)(const CameraParamsMap&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RGBDBus_getAllCameraParams<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::RoboCompRGBDBus::RGBDBus::begin_getAllCameraParams.
 * Create a wrapper instance by calling ::RoboCompRGBDBus::newCallback_RGBDBus_getAllCameraParams.
 */
template<class T, typename CT>
class Callback_RGBDBus_getAllCameraParams : public Callback_RGBDBus_getAllCameraParams_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CameraParamsMap&, const CT&);

    Callback_RGBDBus_getAllCameraParams(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        RGBDBusPrx proxy = RGBDBusPrx::uncheckedCast(result->getProxy());
        CameraParamsMap ret;
        try
        {
            ret = proxy->end_getAllCameraParams(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompRGBDBus::RGBDBus::begin_getAllCameraParams.
 */
template<class T, typename CT> Callback_RGBDBus_getAllCameraParamsPtr
newCallback_RGBDBus_getAllCameraParams(const IceUtil::Handle<T>& instance, void (T::*cb)(const CameraParamsMap&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RGBDBus_getAllCameraParams<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompRGBDBus::RGBDBus::begin_getAllCameraParams.
 */
template<class T, typename CT> Callback_RGBDBus_getAllCameraParamsPtr
newCallback_RGBDBus_getAllCameraParams(T* instance, void (T::*cb)(const CameraParamsMap&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RGBDBus_getAllCameraParams<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::RoboCompRGBDBus::RGBDBus::begin_getImages.
 * Create a wrapper instance by calling ::RoboCompRGBDBus::newCallback_RGBDBus_getImages.
 */
template<class T>
class CallbackNC_RGBDBus_getImages : public Callback_RGBDBus_getImages_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ImageMap&);

    CallbackNC_RGBDBus_getImages(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        RGBDBusPrx proxy = RGBDBusPrx::uncheckedCast(result->getProxy());
        ImageMap iceP_images;
        try
        {
            proxy->end_getImages(iceP_images, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(iceP_images);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompRGBDBus::RGBDBus::begin_getImages.
 */
template<class T> Callback_RGBDBus_getImagesPtr
newCallback_RGBDBus_getImages(const IceUtil::Handle<T>& instance, void (T::*cb)(const ImageMap&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RGBDBus_getImages<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompRGBDBus::RGBDBus::begin_getImages.
 */
template<class T> Callback_RGBDBus_getImagesPtr
newCallback_RGBDBus_getImages(T* instance, void (T::*cb)(const ImageMap&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RGBDBus_getImages<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::RoboCompRGBDBus::RGBDBus::begin_getImages.
 * Create a wrapper instance by calling ::RoboCompRGBDBus::newCallback_RGBDBus_getImages.
 */
template<class T, typename CT>
class Callback_RGBDBus_getImages : public Callback_RGBDBus_getImages_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ImageMap&, const CT&);

    Callback_RGBDBus_getImages(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        RGBDBusPrx proxy = RGBDBusPrx::uncheckedCast(result->getProxy());
        ImageMap iceP_images;
        try
        {
            proxy->end_getImages(iceP_images, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(iceP_images, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompRGBDBus::RGBDBus::begin_getImages.
 */
template<class T, typename CT> Callback_RGBDBus_getImagesPtr
newCallback_RGBDBus_getImages(const IceUtil::Handle<T>& instance, void (T::*cb)(const ImageMap&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RGBDBus_getImages<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompRGBDBus::RGBDBus::begin_getImages.
 */
template<class T, typename CT> Callback_RGBDBus_getImagesPtr
newCallback_RGBDBus_getImages(T* instance, void (T::*cb)(const ImageMap&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RGBDBus_getImages<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::RoboCompRGBDBus::RGBDBus::begin_getPointClouds.
 * Create a wrapper instance by calling ::RoboCompRGBDBus::newCallback_RGBDBus_getPointClouds.
 */
template<class T>
class CallbackNC_RGBDBus_getPointClouds : public Callback_RGBDBus_getPointClouds_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const PointCloudMap&);

    CallbackNC_RGBDBus_getPointClouds(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        RGBDBusPrx proxy = RGBDBusPrx::uncheckedCast(result->getProxy());
        PointCloudMap iceP_clouds;
        try
        {
            proxy->end_getPointClouds(iceP_clouds, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(iceP_clouds);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompRGBDBus::RGBDBus::begin_getPointClouds.
 */
template<class T> Callback_RGBDBus_getPointCloudsPtr
newCallback_RGBDBus_getPointClouds(const IceUtil::Handle<T>& instance, void (T::*cb)(const PointCloudMap&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RGBDBus_getPointClouds<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompRGBDBus::RGBDBus::begin_getPointClouds.
 */
template<class T> Callback_RGBDBus_getPointCloudsPtr
newCallback_RGBDBus_getPointClouds(T* instance, void (T::*cb)(const PointCloudMap&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RGBDBus_getPointClouds<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::RoboCompRGBDBus::RGBDBus::begin_getPointClouds.
 * Create a wrapper instance by calling ::RoboCompRGBDBus::newCallback_RGBDBus_getPointClouds.
 */
template<class T, typename CT>
class Callback_RGBDBus_getPointClouds : public Callback_RGBDBus_getPointClouds_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const PointCloudMap&, const CT&);

    Callback_RGBDBus_getPointClouds(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        RGBDBusPrx proxy = RGBDBusPrx::uncheckedCast(result->getProxy());
        PointCloudMap iceP_clouds;
        try
        {
            proxy->end_getPointClouds(iceP_clouds, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(iceP_clouds, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompRGBDBus::RGBDBus::begin_getPointClouds.
 */
template<class T, typename CT> Callback_RGBDBus_getPointCloudsPtr
newCallback_RGBDBus_getPointClouds(const IceUtil::Handle<T>& instance, void (T::*cb)(const PointCloudMap&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RGBDBus_getPointClouds<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompRGBDBus::RGBDBus::begin_getPointClouds.
 */
template<class T, typename CT> Callback_RGBDBus_getPointCloudsPtr
newCallback_RGBDBus_getPointClouds(T* instance, void (T::*cb)(const PointCloudMap&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RGBDBus_getPointClouds<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::RoboCompRGBDBus::RGBDBus::begin_getProtoClouds.
 * Create a wrapper instance by calling ::RoboCompRGBDBus::newCallback_RGBDBus_getProtoClouds.
 */
template<class T>
class CallbackNC_RGBDBus_getProtoClouds : public Callback_RGBDBus_getProtoClouds_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const PointCloudMap&);

    CallbackNC_RGBDBus_getProtoClouds(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        RGBDBusPrx proxy = RGBDBusPrx::uncheckedCast(result->getProxy());
        PointCloudMap iceP_protoClouds;
        try
        {
            proxy->end_getProtoClouds(iceP_protoClouds, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(iceP_protoClouds);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompRGBDBus::RGBDBus::begin_getProtoClouds.
 */
template<class T> Callback_RGBDBus_getProtoCloudsPtr
newCallback_RGBDBus_getProtoClouds(const IceUtil::Handle<T>& instance, void (T::*cb)(const PointCloudMap&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RGBDBus_getProtoClouds<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompRGBDBus::RGBDBus::begin_getProtoClouds.
 */
template<class T> Callback_RGBDBus_getProtoCloudsPtr
newCallback_RGBDBus_getProtoClouds(T* instance, void (T::*cb)(const PointCloudMap&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RGBDBus_getProtoClouds<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::RoboCompRGBDBus::RGBDBus::begin_getProtoClouds.
 * Create a wrapper instance by calling ::RoboCompRGBDBus::newCallback_RGBDBus_getProtoClouds.
 */
template<class T, typename CT>
class Callback_RGBDBus_getProtoClouds : public Callback_RGBDBus_getProtoClouds_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const PointCloudMap&, const CT&);

    Callback_RGBDBus_getProtoClouds(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        RGBDBusPrx proxy = RGBDBusPrx::uncheckedCast(result->getProxy());
        PointCloudMap iceP_protoClouds;
        try
        {
            proxy->end_getProtoClouds(iceP_protoClouds, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(iceP_protoClouds, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompRGBDBus::RGBDBus::begin_getProtoClouds.
 */
template<class T, typename CT> Callback_RGBDBus_getProtoCloudsPtr
newCallback_RGBDBus_getProtoClouds(const IceUtil::Handle<T>& instance, void (T::*cb)(const PointCloudMap&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RGBDBus_getProtoClouds<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompRGBDBus::RGBDBus::begin_getProtoClouds.
 */
template<class T, typename CT> Callback_RGBDBus_getProtoCloudsPtr
newCallback_RGBDBus_getProtoClouds(T* instance, void (T::*cb)(const PointCloudMap&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RGBDBus_getProtoClouds<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::RoboCompRGBDBus::RGBDBus::begin_getDecimatedImages.
 * Create a wrapper instance by calling ::RoboCompRGBDBus::newCallback_RGBDBus_getDecimatedImages.
 */
template<class T>
class CallbackNC_RGBDBus_getDecimatedImages : public Callback_RGBDBus_getDecimatedImages_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ImageMap&);

    CallbackNC_RGBDBus_getDecimatedImages(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        RGBDBusPrx proxy = RGBDBusPrx::uncheckedCast(result->getProxy());
        ImageMap iceP_images;
        try
        {
            proxy->end_getDecimatedImages(iceP_images, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(iceP_images);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompRGBDBus::RGBDBus::begin_getDecimatedImages.
 */
template<class T> Callback_RGBDBus_getDecimatedImagesPtr
newCallback_RGBDBus_getDecimatedImages(const IceUtil::Handle<T>& instance, void (T::*cb)(const ImageMap&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RGBDBus_getDecimatedImages<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompRGBDBus::RGBDBus::begin_getDecimatedImages.
 */
template<class T> Callback_RGBDBus_getDecimatedImagesPtr
newCallback_RGBDBus_getDecimatedImages(T* instance, void (T::*cb)(const ImageMap&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RGBDBus_getDecimatedImages<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::RoboCompRGBDBus::RGBDBus::begin_getDecimatedImages.
 * Create a wrapper instance by calling ::RoboCompRGBDBus::newCallback_RGBDBus_getDecimatedImages.
 */
template<class T, typename CT>
class Callback_RGBDBus_getDecimatedImages : public Callback_RGBDBus_getDecimatedImages_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ImageMap&, const CT&);

    Callback_RGBDBus_getDecimatedImages(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        RGBDBusPrx proxy = RGBDBusPrx::uncheckedCast(result->getProxy());
        ImageMap iceP_images;
        try
        {
            proxy->end_getDecimatedImages(iceP_images, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(iceP_images, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompRGBDBus::RGBDBus::begin_getDecimatedImages.
 */
template<class T, typename CT> Callback_RGBDBus_getDecimatedImagesPtr
newCallback_RGBDBus_getDecimatedImages(const IceUtil::Handle<T>& instance, void (T::*cb)(const ImageMap&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RGBDBus_getDecimatedImages<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompRGBDBus::RGBDBus::begin_getDecimatedImages.
 */
template<class T, typename CT> Callback_RGBDBus_getDecimatedImagesPtr
newCallback_RGBDBus_getDecimatedImages(T* instance, void (T::*cb)(const ImageMap&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RGBDBus_getDecimatedImages<T, CT>(instance, cb, excb, sentcb);
}

}

#endif

#include <IceUtil/PopDisableWarnings.h>
#endif
