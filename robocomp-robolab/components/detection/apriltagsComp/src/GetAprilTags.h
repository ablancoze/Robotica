//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.2
//
// <auto-generated>
//
// Generated from file `GetAprilTags.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __GetAprilTags_h__
#define __GetAprilTags_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/ValueF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Comparable.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/GCObject.h>
#include <Ice/Value.h>
#include <Ice/Incoming.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <Ice/Optional.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 2
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace RoboCompGetAprilTags
{

class GetAprilTags;
class GetAprilTagsPrx;

}

namespace RoboCompGetAprilTags
{

struct marca
{
    int id;
    float tx;
    float ty;
    float tz;
    float rx;
    float ry;
    float rz;

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */

    std::tuple<const int&, const float&, const float&, const float&, const float&, const float&, const float&> ice_tuple() const
    {
        return std::tie(id, tx, ty, tz, rx, ry, rz);
    }
};

using listaMarcas = ::std::vector<marca>;

using Ice::operator<;
using Ice::operator<=;
using Ice::operator>;
using Ice::operator>=;
using Ice::operator==;
using Ice::operator!=;

}

namespace RoboCompGetAprilTags
{

class GetAprilTags : public virtual ::Ice::Object
{
public:

    using ProxyType = GetAprilTagsPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual listaMarcas checkMarcas(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_checkMarcas(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

}

namespace RoboCompGetAprilTags
{

class GetAprilTagsPrx : public virtual ::Ice::Proxy<GetAprilTagsPrx, ::Ice::ObjectPrx>
{
public:

    listaMarcas checkMarcas(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<listaMarcas>(true, this, &GetAprilTagsPrx::_iceI_checkMarcas, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto checkMarcasAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<listaMarcas>>().get_future())
    {
        return _makePromiseOutgoing<listaMarcas, P>(false, this, &GetAprilTagsPrx::_iceI_checkMarcas, context);
    }

    ::std::function<void()>
    checkMarcasAsync(::std::function<void(listaMarcas)> response,
                     ::std::function<void(::std::exception_ptr)> ex = nullptr,
                     ::std::function<void(bool)> sent = nullptr,
                     const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<listaMarcas>(response, ex, sent, this, &RoboCompGetAprilTags::GetAprilTagsPrx::_iceI_checkMarcas, context);
    }

    /// \cond INTERNAL
    void _iceI_checkMarcas(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<listaMarcas>>&, const ::Ice::Context&);
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:

    /// \cond INTERNAL
    GetAprilTagsPrx() = default;
    friend ::std::shared_ptr<GetAprilTagsPrx> IceInternal::createProxy<GetAprilTagsPrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
    /// \endcond
};

}

/// \cond STREAM
namespace Ice
{

template<>
struct StreamableTraits<::RoboCompGetAprilTags::marca>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 28;
    static const bool fixedLength = true;
};

template<typename S>
struct StreamReader<::RoboCompGetAprilTags::marca, S>
{
    static void read(S* istr, ::RoboCompGetAprilTags::marca& v)
    {
        istr->readAll(v.id, v.tx, v.ty, v.tz, v.rx, v.ry, v.rz);
    }
};

}
/// \endcond

/// \cond INTERNAL
namespace RoboCompGetAprilTags
{

using GetAprilTagsPtr = ::std::shared_ptr<GetAprilTags>;
using GetAprilTagsPrxPtr = ::std::shared_ptr<GetAprilTagsPrx>;

}
/// \endcond

#else // C++98 mapping

namespace IceProxy
{

namespace RoboCompGetAprilTags
{

class GetAprilTags;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< GetAprilTags>&);
::IceProxy::Ice::Object* upCast(GetAprilTags*);
/// \endcond

}

}

namespace RoboCompGetAprilTags
{

class GetAprilTags;
/// \cond INTERNAL
::Ice::Object* upCast(GetAprilTags*);
/// \endcond
typedef ::IceInternal::Handle< GetAprilTags> GetAprilTagsPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::RoboCompGetAprilTags::GetAprilTags> GetAprilTagsPrx;
typedef GetAprilTagsPrx GetAprilTagsPrxPtr;
/// \cond INTERNAL
void _icePatchObjectPtr(GetAprilTagsPtr&, const ::Ice::ObjectPtr&);
/// \endcond

}

namespace RoboCompGetAprilTags
{

struct marca
{
    ::Ice::Int id;
    ::Ice::Float tx;
    ::Ice::Float ty;
    ::Ice::Float tz;
    ::Ice::Float rx;
    ::Ice::Float ry;
    ::Ice::Float rz;
};

typedef ::std::vector<marca> listaMarcas;

}

namespace RoboCompGetAprilTags
{

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::RoboCompGetAprilTags::GetAprilTags::begin_checkMarcas.
 * Create a wrapper instance by calling ::RoboCompGetAprilTags::newCallback_GetAprilTags_checkMarcas.
 */
class Callback_GetAprilTags_checkMarcas_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_GetAprilTags_checkMarcas_Base> Callback_GetAprilTags_checkMarcasPtr;

}

namespace IceProxy
{

namespace RoboCompGetAprilTags
{

class GetAprilTags : public virtual ::Ice::Proxy<GetAprilTags, ::IceProxy::Ice::Object>
{
public:

    ::RoboCompGetAprilTags::listaMarcas checkMarcas(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_checkMarcas(_iceI_begin_checkMarcas(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_checkMarcas(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_checkMarcas(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_checkMarcas(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_checkMarcas(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_checkMarcas(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_checkMarcas(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_checkMarcas(const ::RoboCompGetAprilTags::Callback_GetAprilTags_checkMarcasPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_checkMarcas(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_checkMarcas(const ::Ice::Context& context, const ::RoboCompGetAprilTags::Callback_GetAprilTags_checkMarcasPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_checkMarcas(context, cb, cookie);
    }

    ::RoboCompGetAprilTags::listaMarcas end_checkMarcas(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_checkMarcas(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

}

}

namespace RoboCompGetAprilTags
{

class GetAprilTags : public virtual ::Ice::Object
{
public:

    typedef GetAprilTagsPrx ProxyType;
    typedef GetAprilTagsPtr PointerType;

    virtual ~GetAprilTags();

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(const ::std::string& id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual const ::std::string& ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual listaMarcas checkMarcas(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_checkMarcas(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

protected:

    /// \cond STREAM
    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
    /// \endcond
};

/// \cond INTERNAL
inline bool operator==(const GetAprilTags& lhs, const GetAprilTags& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) == static_cast<const ::Ice::Object&>(rhs);
}

inline bool operator<(const GetAprilTags& lhs, const GetAprilTags& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) < static_cast<const ::Ice::Object&>(rhs);
}
/// \endcond

}

/// \cond STREAM
namespace Ice
{

template<>
struct StreamableTraits< ::RoboCompGetAprilTags::marca>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 28;
    static const bool fixedLength = true;
};

template<typename S>
struct StreamWriter< ::RoboCompGetAprilTags::marca, S>
{
    static void write(S* ostr, const ::RoboCompGetAprilTags::marca& v)
    {
        ostr->write(v.id);
        ostr->write(v.tx);
        ostr->write(v.ty);
        ostr->write(v.tz);
        ostr->write(v.rx);
        ostr->write(v.ry);
        ostr->write(v.rz);
    }
};

template<typename S>
struct StreamReader< ::RoboCompGetAprilTags::marca, S>
{
    static void read(S* istr, ::RoboCompGetAprilTags::marca& v)
    {
        istr->read(v.id);
        istr->read(v.tx);
        istr->read(v.ty);
        istr->read(v.tz);
        istr->read(v.rx);
        istr->read(v.ry);
        istr->read(v.rz);
    }
};

}
/// \endcond

namespace RoboCompGetAprilTags
{

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::RoboCompGetAprilTags::GetAprilTags::begin_checkMarcas.
 * Create a wrapper instance by calling ::RoboCompGetAprilTags::newCallback_GetAprilTags_checkMarcas.
 */
template<class T>
class CallbackNC_GetAprilTags_checkMarcas : public Callback_GetAprilTags_checkMarcas_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const listaMarcas&);

    CallbackNC_GetAprilTags_checkMarcas(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        GetAprilTagsPrx proxy = GetAprilTagsPrx::uncheckedCast(result->getProxy());
        listaMarcas ret;
        try
        {
            ret = proxy->end_checkMarcas(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompGetAprilTags::GetAprilTags::begin_checkMarcas.
 */
template<class T> Callback_GetAprilTags_checkMarcasPtr
newCallback_GetAprilTags_checkMarcas(const IceUtil::Handle<T>& instance, void (T::*cb)(const listaMarcas&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GetAprilTags_checkMarcas<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompGetAprilTags::GetAprilTags::begin_checkMarcas.
 */
template<class T> Callback_GetAprilTags_checkMarcasPtr
newCallback_GetAprilTags_checkMarcas(T* instance, void (T::*cb)(const listaMarcas&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GetAprilTags_checkMarcas<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::RoboCompGetAprilTags::GetAprilTags::begin_checkMarcas.
 * Create a wrapper instance by calling ::RoboCompGetAprilTags::newCallback_GetAprilTags_checkMarcas.
 */
template<class T, typename CT>
class Callback_GetAprilTags_checkMarcas : public Callback_GetAprilTags_checkMarcas_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const listaMarcas&, const CT&);

    Callback_GetAprilTags_checkMarcas(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        GetAprilTagsPrx proxy = GetAprilTagsPrx::uncheckedCast(result->getProxy());
        listaMarcas ret;
        try
        {
            ret = proxy->end_checkMarcas(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompGetAprilTags::GetAprilTags::begin_checkMarcas.
 */
template<class T, typename CT> Callback_GetAprilTags_checkMarcasPtr
newCallback_GetAprilTags_checkMarcas(const IceUtil::Handle<T>& instance, void (T::*cb)(const listaMarcas&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GetAprilTags_checkMarcas<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompGetAprilTags::GetAprilTags::begin_checkMarcas.
 */
template<class T, typename CT> Callback_GetAprilTags_checkMarcasPtr
newCallback_GetAprilTags_checkMarcas(T* instance, void (T::*cb)(const listaMarcas&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GetAprilTags_checkMarcas<T, CT>(instance, cb, excb, sentcb);
}

}

#endif

#include <IceUtil/PopDisableWarnings.h>
#endif
